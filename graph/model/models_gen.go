// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"database/sql/driver"
	"encoding/json"
	"errors"
)

type Author struct {
	ID        string `json:"id" gorm:"primaryKey; type:uuid;"`
	FirstName string `json:"first_name"`
	LastName  string `json:"last_name"`
}

type AuthorInput struct {
	FirstName string `json:"first_name"`
	LastName  string `json:"last_name"`
}

type Comment struct {
	ID      string `json:"id" gorm:"primaryKey; type:uuid;"`
	Content string `json:"content"`
	Post    string `json:"post_id"`
}

type CommentInput struct {
	Content string `json:"content"`
	Post    string `json:"post_id"`
}

type Like struct {
	ID    string `json:"id" gorm:"primaryKey; type:uuid;"`
	Liked bool   `json:"Liked"`
	Post  string `json:"post_id"`
}

type LikeInput struct {
	Liked bool   `json:"Liked"`
	Post  string `json:"post_id"`
}

type Post struct {
	ID       string     `json:"id" gorm:"primaryKey; type:uuid;"`
	Title    *string    `json:"title"`
	Content  *string    `json:"content"`
	AuthorID *string 	`json:"author_Id"`
	Author   *Author    `json:"author" gorm:"references:ID"`
	Comments []*Comment `json:"comments" gorm:"foreignKey:Post"`
	Likes    []*Like    `json:"likes"  gorm:"foreignKey:Post"`
}

type PostInput struct {
	Title   string `json:"title"`
	Content string `json:"content"`
	Author  string `json:"author"`
}

type JSON map[string]interface{}

func (s JSON) Value() (driver.Value, error) {
	if len(s) == 0 {
		return "{}", nil
	}
	res, err := json.Marshal(s)
	if err != nil {
		return nil, err
	}
	return string(res), nil
}
func (s *JSON) Scan(src interface{}) (err error) {
	var model map[string]interface{}
	switch src.(type) {
	case string:
		err = json.Unmarshal([]byte(src.(string)), &model)
	case []byte:
		err = json.Unmarshal(src.([]byte), &model)
	default:
		return errors.New("incompatible type for map[string]interface{}")
	}
	if err != nil {
		return err
	}
	*s = model
	return nil
}